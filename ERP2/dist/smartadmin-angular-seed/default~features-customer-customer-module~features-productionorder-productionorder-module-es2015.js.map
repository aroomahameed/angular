{"version":3,"sources":["webpack:///./src/app/features/store/customer/client/client.actions.ts","webpack:///./src/app/features/store/customer/client/client.effects.ts","webpack:///./src/app/features/store/customer/client/client.reducer.ts","webpack:///./src/app/features/store/customer/client/client.selectors.ts","webpack:///./src/app/features/store/customer/client/client.service.ts","webpack:///./src/app/features/store/customer/client/index.ts","webpack:///./src/app/features/store/customer/customer/customer.actions.ts","webpack:///./src/app/features/store/customer/customer/customer.effects.ts","webpack:///./src/app/features/store/customer/customer/customer.reducer.ts","webpack:///./src/app/features/store/customer/customer/customer.selectors.ts","webpack:///./src/app/features/store/customer/customer/customer.service.ts","webpack:///./src/app/features/store/customer/customer/index.ts"],"names":[],"mappings":"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","file":"default~features-customer-customer-module~features-productionorder-productionorder-module-es2015.js","sourcesContent":["import {createAction, props} from '@ngrx/store';\r\n\r\nimport {Client} from './client';\r\n\r\nexport const loadClients = createAction(\r\n    '[Client/API] Load Clients'\r\n);\r\n\r\nexport const loadClientsSuccess = createAction(\r\n    '[Client/API] Load Clients Success',\r\n    props<{ data: Client[] }>(),\r\n);\r\n\r\nexport const addClient = createAction(\r\n    '[Client/API] Add Client',\r\n    props<{ data: Client }>(),\r\n);\r\n\r\nexport const addClientSuccess = createAction(\r\n    '[Client/API] Add Client Success',\r\n    props<{ data: Client }>(),\r\n);\r\n\r\n\r\nexport const deleteClient = createAction(\r\n    '[Client/API] Delete Client',\r\n    props<{ data: Client }>(),\r\n);\r\n\r\nexport const deleteClientSuccess = createAction(\r\n    '[Client/API] Delete Client Success',\r\n    props<{ id: string}>(),\r\n);\r\n\r\nexport const selectCurrentClientSuccess = createAction(\r\n    '[Client/API] Select Current Client',\r\n    props<{ data: Client }>(),\r\n);\r\n\r\n","import {Injectable} from '@angular/core';\r\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\r\nimport {Store} from '@ngrx/store';\r\nimport {ClientService} from './client.service';\r\nimport {\r\n  addClient,\r\n  addClientSuccess,\r\n  deleteClient, deleteClientSuccess,\r\n  loadClients,\r\n  loadClientsSuccess,\r\n} from './client.actions';\r\nimport {filter, map, mergeMap, withLatestFrom} from 'rxjs/operators';\r\nimport {allClientLoaded} from './client.selectors';\r\n\r\n\r\n@Injectable()\r\nexport class ClientEffects {\r\n\r\n    loadClients$ = createEffect(() => this.actions$.pipe(\r\n        ofType(loadClients),\r\n        withLatestFrom(this.store.select(allClientLoaded)),\r\n        filter(([_, allLoaded]) => !allLoaded),\r\n        mergeMap(_ => this.service.findAll().pipe(\r\n            map(data => loadClientsSuccess({data})),\r\n        )),\r\n    ));\r\n\r\n    addClient$ = createEffect(() => this.actions$.pipe(\r\n        ofType(addClient),\r\n        mergeMap(action => this.service.save(action.data).pipe(\r\n            map(data => addClientSuccess({data})),\r\n        )),\r\n    ));\r\n\r\n    deleteClient$ = createEffect(() => this.actions$.pipe(\r\n        ofType(deleteClient),\r\n        mergeMap(({data}) => this.service.delete(data).pipe(\r\n            map(_ => deleteClientSuccess({id: data.id})),\r\n        )),\r\n    ));\r\n\r\n    constructor(private actions$: Actions, private store: Store<any>, private service: ClientService) {\r\n    }\r\n\r\n}\r\n","import {Action, createReducer, on} from '@ngrx/store';\r\nimport {EntityState, EntityAdapter, createEntityAdapter} from '@ngrx/entity';\r\nimport {Client} from './client';\r\nimport * as ClientActions from './client.actions';\r\n\r\nexport const clientFeatureKey = 'clients';\r\n\r\nexport interface ClientState extends EntityState<Client> {\r\n    allClientsLoaded: boolean;\r\n    currentClient: Client\r\n}\r\n\r\nexport const adapter: EntityAdapter<Client> = createEntityAdapter<Client>();\r\n\r\nexport const initialState: ClientState = adapter.getInitialState({\r\n    allClientsLoaded: false,\r\n    currentClient: null\r\n});\r\n\r\nconst clientReducer = createReducer(\r\n    initialState,\r\n    on(ClientActions.addClientSuccess,\r\n        (state, action) => adapter.upsertOne(action.data, {...state, currentClient: action.data}),\r\n    ),\r\n    on(ClientActions.deleteClientSuccess,\r\n        (state, action) => adapter.removeOne(action.id, state),\r\n    ),\r\n\r\n    on(ClientActions.loadClientsSuccess,\r\n        (state, action) => adapter.addAll(action.data, state),\r\n    ),\r\n    on(ClientActions.selectCurrentClientSuccess,\r\n        (state, action) => ({...state, currentClient: action.data}),\r\n    ),\r\n);\r\n\r\nexport function reducer(state: ClientState | undefined, action: Action) {\r\n    return clientReducer(state, action);\r\n}\r\n\r\nexport const {\r\n    selectIds,\r\n    selectEntities,\r\n    selectAll,\r\n    selectTotal,\r\n} = adapter.getSelectors();\r\n","import {createFeatureSelector, createSelector} from '@ngrx/store';\r\nimport {ClientState, clientFeatureKey, selectAll} from './client.reducer';\r\n\r\nconst featureState = createFeatureSelector<ClientState>(clientFeatureKey);\r\n\r\nexport const selectAllClients = createSelector(\r\n    featureState,\r\n    selectAll,\r\n);\r\n\r\nexport const allClientLoaded = createSelector(\r\n    featureState,\r\n    state => state.allClientsLoaded,\r\n);\r\n\r\nexport const selectCurrentClient = createSelector(\r\n    featureState,\r\n    state => state.currentClient\r\n)\r\n\r\n","import {Injectable} from '@angular/core';\r\nimport {APP_CONFIG} from '../../../../app.config';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {Client} from './client';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ClientService {\r\n    private url = `${APP_CONFIG.BASE_URL}/clients/`;\r\n\r\n    constructor(private http: HttpClient) {\r\n    }\r\n\r\n    findAll(): Observable<Client[]> {\r\n        return this.http.get<Client[]>(this.url);\r\n    }\r\n\r\n    save(item: Client): Observable<Client> {\r\n        if (!item.id) {\r\n            return this.http.post<Client>(this.url, item);\r\n        } else {\r\n            return this.update(item);\r\n        }\r\n    }\r\n\r\n    private update(item: Client): Observable<Client> {\r\n        return this.http.put<Client>(`${this.url}${item.id}/`, item);\r\n    }\r\n\r\n    delete(item: Client) {\r\n        return this.http.delete(`${this.url}${item.id}/`);\r\n    }\r\n}\r\n","export * from './client';\r\nexport * from './client.effects';\r\nexport * from './client.service';\r\nexport * from './client.selectors';\r\nexport * from './client.reducer';\r\nexport * from './client.actions';\r\n","import {createAction, props} from '@ngrx/store';\r\n\r\nimport {Customer} from './customer';\r\n\r\nexport const loadCustomers = createAction(\r\n    '[Customer/API] Load Customers'\r\n);\r\n\r\nexport const loadCustomersSuccess = createAction(\r\n    '[Customer/API] Load Customers Success',\r\n    props<{ data: Customer[] }>(),\r\n);\r\n\r\nexport const addCustomer = createAction(\r\n    '[Customer/API] Add Customer',\r\n    props<{ data: Customer }>(),\r\n);\r\n\r\nexport const addCustomerSuccess = createAction(\r\n    '[Customer/API] Add Customer Success',\r\n    props<{ data: Customer }>(),\r\n);\r\n\r\n\r\nexport const deleteCustomer = createAction(\r\n    '[Customer/API] Delete Customer',\r\n    props<{ data: Customer }>(),\r\n);\r\n\r\nexport const deleteCustomerSuccess = createAction(\r\n    '[Customer/API] Delete Customer Success',\r\n    props<{ id: string}>(),\r\n);\r\n\r\nexport const selectCurrentCustomerSuccess = createAction(\r\n    '[Customer/API] Select Current Customer',\r\n    props<{ data: Customer }>(),\r\n);\r\n\r\n","import {Injectable} from '@angular/core';\r\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\r\nimport {Store} from '@ngrx/store';\r\nimport {CustomerService} from './customer.service';\r\nimport {\r\n  addCustomer,\r\n  addCustomerSuccess,\r\n  deleteCustomer, deleteCustomerSuccess,\r\n  loadCustomers,\r\n  loadCustomersSuccess,\r\n} from './customer.actions';\r\nimport {filter, map, mergeMap, withLatestFrom} from 'rxjs/operators';\r\nimport {allCustomerLoaded} from './customer.selectors';\r\n\r\n\r\n@Injectable()\r\nexport class CustomerEffects {\r\n\r\n    loadCustomers$ = createEffect(() => this.actions$.pipe(\r\n        ofType(loadCustomers),\r\n        withLatestFrom(this.store.select(allCustomerLoaded)),\r\n        filter(([_, allLoaded]) => !allLoaded),\r\n        mergeMap(_ => this.service.findAll().pipe(\r\n            map(data => loadCustomersSuccess({data})),\r\n        )),\r\n    ));\r\n\r\n    addCustomer$ = createEffect(() => this.actions$.pipe(\r\n        ofType(addCustomer),\r\n        mergeMap(action => this.service.save(action.data).pipe(\r\n            map(data => addCustomerSuccess({data})),\r\n        )),\r\n    ));\r\n\r\n    deleteCustomer$ = createEffect(() => this.actions$.pipe(\r\n        ofType(deleteCustomer),\r\n        mergeMap(({data}) => this.service.delete(data).pipe(\r\n            map(_ => deleteCustomerSuccess({id: data.id})),\r\n        )),\r\n    ));\r\n\r\n    constructor(private actions$: Actions, private store: Store<any>, private service: CustomerService) {\r\n    }\r\n\r\n}\r\n","import {Action, createReducer, on} from '@ngrx/store';\r\nimport {EntityState, EntityAdapter, createEntityAdapter} from '@ngrx/entity';\r\nimport {Customer} from './customer';\r\nimport * as CustomerActions from './customer.actions';\r\n\r\nexport const customerFeatureKey = 'customers';\r\n\r\nexport interface CustomerState extends EntityState<Customer> {\r\n    allCustomersLoaded: boolean;\r\n    currentCustomer: Customer\r\n}\r\n\r\nexport const adapter: EntityAdapter<Customer> = createEntityAdapter<Customer>();\r\n\r\nexport const initialState: CustomerState = adapter.getInitialState({\r\n    allCustomersLoaded: false,\r\n    currentCustomer: null\r\n});\r\n\r\nconst customerReducer = createReducer(\r\n    initialState,\r\n    on(CustomerActions.addCustomerSuccess,\r\n        (state, action) => adapter.upsertOne(action.data, {...state, currentCustomer: action.data}),\r\n    ),\r\n    on(CustomerActions.deleteCustomerSuccess,\r\n        (state, action) => adapter.removeOne(action.id, state),\r\n    ),\r\n\r\n    on(CustomerActions.loadCustomersSuccess,\r\n        (state, action) => adapter.addAll(action.data, state),\r\n    ),\r\n    on(CustomerActions.selectCurrentCustomerSuccess,\r\n        (state, action) => ({...state, currentCustomer: action.data}),\r\n    ),\r\n);\r\n\r\nexport function reducer(state: CustomerState | undefined, action: Action) {\r\n    return customerReducer(state, action);\r\n}\r\n\r\nexport const {\r\n    selectIds,\r\n    selectEntities,\r\n    selectAll,\r\n    selectTotal,\r\n} = adapter.getSelectors();\r\n","import {createFeatureSelector, createSelector} from '@ngrx/store';\r\nimport {CustomerState, customerFeatureKey, selectAll} from './customer.reducer';\r\n\r\nconst featureState = createFeatureSelector<CustomerState>(customerFeatureKey);\r\n\r\nexport const selectAllCustomers = createSelector(\r\n    featureState,\r\n    selectAll,\r\n);\r\n\r\nexport const allCustomerLoaded = createSelector(\r\n    featureState,\r\n    state => state.allCustomersLoaded,\r\n);\r\n\r\nexport const selectCurrentCustomer = createSelector(\r\n    featureState,\r\n    state => state.currentCustomer\r\n)\r\n\r\n","import {Injectable} from '@angular/core';\r\nimport {APP_CONFIG} from '../../../../app.config';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {Customer} from './customer';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class CustomerService {\r\n    private url = `${APP_CONFIG.BASE_URL}/customers/`;\r\n\r\n    constructor(private http: HttpClient) {\r\n    }\r\n\r\n    findAll(): Observable<Customer[]> {\r\n        return this.http.get<Customer[]>(this.url);\r\n    }\r\n\r\n    save(item: Customer): Observable<Customer> {\r\n        if (!item.id) {\r\n            return this.http.post<Customer>(this.url, item);\r\n        } else {\r\n            return this.update(item);\r\n        }\r\n    }\r\n\r\n    private update(item: Customer): Observable<Customer> {\r\n        return this.http.put<Customer>(`${this.url}${item.id}/`, item);\r\n    }\r\n\r\n    delete(item: Customer) {\r\n        return this.http.delete(`${this.url}${item.id}/`);\r\n    }\r\n}\r\n","export * from './customer';\r\nexport * from './customer.effects';\r\nexport * from './customer.service';\r\nexport * from './customer.selectors';\r\nexport * from './customer.reducer';\r\nexport * from './customer.actions';\r\n"],"sourceRoot":""}