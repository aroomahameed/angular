{"version":3,"sources":["webpack:///./src/app/features/store/article/model/index.ts","webpack:///./src/app/features/store/article/model/model.actions.ts","webpack:///./src/app/features/store/article/model/model.effects.ts","webpack:///./src/app/features/store/article/model/model.reducer.ts","webpack:///./src/app/features/store/article/model/model.selectors.ts","webpack:///./src/app/features/store/article/model/model.service.ts","webpack:///./src/app/features/store/merchandise/material/index.ts","webpack:///./src/app/features/store/merchandise/material/material.actions.ts","webpack:///./src/app/features/store/merchandise/material/material.effects.ts","webpack:///./src/app/features/store/merchandise/material/material.reducer.ts","webpack:///./src/app/features/store/merchandise/material/material.selectors.ts","webpack:///./src/app/features/store/merchandise/material/material.service.ts"],"names":[],"mappings":"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","file":"default~features-article-article-module~features-fit-fit-module-es5.js","sourcesContent":["export * from './model';\r\nexport * from './model.effects';\r\nexport * from './model.service';\r\nexport * from './model.selectors';\r\nexport * from './model.reducer';\r\nexport * from './model.actions';\r\n","import {createAction, props} from '@ngrx/store';\r\n\r\nimport {Model} from './model';\r\n\r\nexport const loadModels = createAction(\r\n    '[Model/API] Load Models'\r\n);\r\n\r\nexport const loadModelsSuccess = createAction(\r\n    '[Model/API] Load Models Success',\r\n    props<{ data: Model[] }>(),\r\n);\r\n\r\nexport const addModel = createAction(\r\n    '[Model/API] Add Model',\r\n    props<{ data: Model }>(),\r\n);\r\n\r\nexport const addModelSuccess = createAction(\r\n    '[Model/API] Add Model Success',\r\n    props<{ data: Model }>(),\r\n);\r\n\r\n\r\nexport const deleteModel = createAction(\r\n    '[Model/API] Delete Model',\r\n    props<{ data: Model }>(),\r\n);\r\n\r\nexport const deleteModelSuccess = createAction(\r\n    '[Model/API] Delete Model Success',\r\n    props<{ id: string}>(),\r\n);\r\n\r\nexport const selectCurrentModelSuccess = createAction(\r\n    '[Model/API] Select Current Model',\r\n    props<{ data: Model }>(),\r\n);\r\n\r\n","import {Injectable} from '@angular/core';\r\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\r\nimport {Store} from '@ngrx/store';\r\nimport {ModelService} from './model.service';\r\nimport {\r\n  addModel,\r\n  addModelSuccess,\r\n  deleteModel, deleteModelSuccess,\r\n  loadModels,\r\n  loadModelsSuccess,\r\n} from './model.actions';\r\nimport {filter, map, mergeMap, withLatestFrom} from 'rxjs/operators';\r\nimport {allModelLoaded} from './model.selectors';\r\n\r\n\r\n@Injectable()\r\nexport class ModelEffects {\r\n\r\n    loadModels$ = createEffect(() => this.actions$.pipe(\r\n        ofType(loadModels),\r\n        withLatestFrom(this.store.select(allModelLoaded)),\r\n        filter(([_, allLoaded]) => !allLoaded),\r\n        mergeMap(_ => this.service.findAll().pipe(\r\n            map(data => loadModelsSuccess({data})),\r\n        )),\r\n    ));\r\n\r\n    addModel$ = createEffect(() => this.actions$.pipe(\r\n        ofType(addModel),\r\n        mergeMap(action => this.service.save(action.data).pipe(\r\n            map(data => addModelSuccess({data})),\r\n        )),\r\n    ));\r\n\r\n    deleteModel$ = createEffect(() => this.actions$.pipe(\r\n        ofType(deleteModel),\r\n        mergeMap(({data}) => this.service.delete(data).pipe(\r\n            map(_ => deleteModelSuccess({id: data.id})),\r\n        )),\r\n    ));\r\n\r\n    constructor(private actions$: Actions, private store: Store<any>, private service: ModelService) {\r\n    }\r\n\r\n}\r\n","import {Action, createReducer, on} from '@ngrx/store';\r\nimport {EntityState, EntityAdapter, createEntityAdapter} from '@ngrx/entity';\r\nimport {Model} from './model';\r\nimport * as ModelActions from './model.actions';\r\n\r\nexport const modelFeatureKey = 'models';\r\n\r\nexport interface ModelState extends EntityState<Model> {\r\n    allModelsLoaded: boolean;\r\n    currentModel: Model\r\n}\r\n\r\nexport const adapter: EntityAdapter<Model> = createEntityAdapter<Model>();\r\n\r\nexport const initialState: ModelState = adapter.getInitialState({\r\n    allModelsLoaded: false,\r\n    currentModel: null\r\n});\r\n\r\nconst modelReducer = createReducer(\r\n    initialState,\r\n    on(ModelActions.addModelSuccess,\r\n        (state, action) => adapter.upsertOne(action.data, {...state, currentModel: action.data}),\r\n    ),\r\n    on(ModelActions.deleteModelSuccess,\r\n        (state, action) => adapter.removeOne(action.id, state),\r\n    ),\r\n\r\n    on(ModelActions.loadModelsSuccess,\r\n        (state, action) => adapter.addAll(action.data, state),\r\n    ),\r\n    on(ModelActions.selectCurrentModelSuccess,\r\n        (state, action) => ({...state, currentModel: action.data}),\r\n    ),\r\n);\r\n\r\nexport function reducer(state: ModelState | undefined, action: Action) {\r\n    return modelReducer(state, action);\r\n}\r\n\r\nexport const {\r\n    selectIds,\r\n    selectEntities,\r\n    selectAll,\r\n    selectTotal,\r\n} = adapter.getSelectors();\r\n","import {createFeatureSelector, createSelector} from '@ngrx/store';\r\nimport { Model } from './model';\r\nimport {ModelState, modelFeatureKey, selectAll} from './model.reducer';\r\n\r\nconst featureState = createFeatureSelector<ModelState>(modelFeatureKey);\r\n\r\nexport const selectAllModels = createSelector(\r\n    featureState,\r\n    selectAll,\r\n);\r\n\r\nexport const allModelLoaded = createSelector(\r\n    featureState,\r\n    state => state.allModelsLoaded,\r\n);\r\n\r\nexport const selectCurrentModel = createSelector(\r\n    featureState,\r\n    state => state.currentModel\r\n)\r\n\r\nexport const selectByClientID = createSelector(\r\n    selectAllModels,\r\n    (models: Model[], id) => {\r\n        const model = models.filter(m => m.client.id == id)\r\n        return model;\r\n    }\r\n)\r\n\r\n","import {Injectable} from '@angular/core';\r\nimport {APP_CONFIG} from '../../../../app.config';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {Model} from './model';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ModelService {\r\n    private url = `${APP_CONFIG.BASE_URL}/models/`;\r\n\r\n    constructor(private http: HttpClient) {\r\n    }\r\n\r\n    findAll(): Observable<Model[]> {\r\n        return this.http.get<Model[]>(this.url);\r\n    }\r\n\r\n    save(item: Model): Observable<Model> {\r\n        if (!item.id) {\r\n            return this.http.post<Model>(this.url, item);\r\n        } else {\r\n            return this.update(item);\r\n        }\r\n    }\r\n\r\n    private update(item: Model): Observable<Model> {\r\n        return this.http.put<Model>(`${this.url}${item.id}/`, item);\r\n    }\r\n\r\n    delete(item: Model) {\r\n        return this.http.delete(`${this.url}${item.id}/`);\r\n    }\r\n}\r\n","export * from './material';\r\nexport * from './material.effects';\r\nexport * from './material.service';\r\nexport * from './material.selectors';\r\nexport * from './material.reducer';\r\nexport * from './material.actions';\r\n","import {createAction, props} from '@ngrx/store';\r\n\r\nimport {Material} from './material';\r\n\r\nexport const loadMaterials = createAction(\r\n    '[Material/API] Load Materials'\r\n);\r\n\r\nexport const loadMaterialsSuccess = createAction(\r\n    '[Material/API] Load Materials Success',\r\n    props<{ data: Material[] }>(),\r\n);\r\n\r\nexport const addMaterial = createAction(\r\n    '[Material/API] Add Material',\r\n    props<{ data: any }>(),\r\n);\r\n\r\nexport const addMaterialSuccess = createAction(\r\n    '[Material/API] Add Material Success',\r\n    props<{ data: Material }>(),\r\n);\r\n\r\n\r\nexport const deleteMaterial = createAction(\r\n    '[Material/API] Delete Material',\r\n    props<{ data: Material }>(),\r\n);\r\n\r\nexport const deleteMaterialSuccess = createAction(\r\n    '[Material/API] Delete Material Success',\r\n    props<{ id: string}>(),\r\n);\r\n\r\nexport const selectCurrentMaterialSuccess = createAction(\r\n    '[Material/API] Select Current Material',\r\n    props<{ data: Material }>(),\r\n);\r\n\r\n","import {Injectable} from '@angular/core';\r\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\r\nimport {Store} from '@ngrx/store';\r\nimport {MaterialService} from './material.service';\r\nimport {\r\n  addMaterial,\r\n  addMaterialSuccess,\r\n  deleteMaterial, deleteMaterialSuccess,\r\n  loadMaterials,\r\n  loadMaterialsSuccess,\r\n} from './material.actions';\r\nimport {filter, map, mergeMap, withLatestFrom} from 'rxjs/operators';\r\nimport {allMaterialLoaded} from './material.selectors';\r\n\r\n\r\n@Injectable()\r\nexport class MaterialEffects {\r\n\r\n    loadMaterials$ = createEffect(() => this.actions$.pipe(\r\n        ofType(loadMaterials),\r\n        withLatestFrom(this.store.select(allMaterialLoaded)),\r\n        filter(([_, allLoaded]) => !allLoaded),\r\n        mergeMap(_ => this.service.findAll().pipe(\r\n            map(data => loadMaterialsSuccess({data})),\r\n        )),\r\n    ));\r\n\r\n    addMaterial$ = createEffect(() => this.actions$.pipe(\r\n        ofType(addMaterial),\r\n        mergeMap(action => this.service.save(action.data).pipe(\r\n            map(data => addMaterialSuccess({data})),\r\n        )),\r\n    ));\r\n\r\n    deleteMaterial$ = createEffect(() => this.actions$.pipe(\r\n        ofType(deleteMaterial),\r\n        mergeMap(({data}) => this.service.delete(data).pipe(\r\n            map(_ => deleteMaterialSuccess({id: data.id})),\r\n        )),\r\n    ));\r\n\r\n    constructor(private actions$: Actions, private store: Store<any>, private service: MaterialService) {\r\n    }\r\n\r\n}\r\n","import {Action, createReducer, on} from '@ngrx/store';\r\nimport {EntityState, EntityAdapter, createEntityAdapter} from '@ngrx/entity';\r\nimport {Material} from './material';\r\nimport * as MaterialActions from './material.actions';\r\n\r\nexport const materialFeatureKey = 'materials';\r\n\r\nexport interface MaterialState extends EntityState<Material> {\r\n    allMaterialsLoaded: boolean;\r\n    currentMaterial: Material\r\n}\r\n\r\nexport const adapter: EntityAdapter<Material> = createEntityAdapter<Material>();\r\n\r\nexport const initialState: MaterialState = adapter.getInitialState({\r\n    allMaterialsLoaded: false,\r\n    currentMaterial: null\r\n});\r\n\r\nconst materialReducer = createReducer(\r\n    initialState,\r\n    on(MaterialActions.addMaterialSuccess,\r\n        (state, action) => adapter.upsertOne(action.data, {...state, currentMaterial: action.data}),\r\n    ),\r\n    on(MaterialActions.deleteMaterialSuccess,\r\n        (state, action) => adapter.removeOne(action.id, state),\r\n    ),\r\n\r\n    on(MaterialActions.loadMaterialsSuccess,\r\n        (state, action) => adapter.addAll(action.data, state),\r\n    ),\r\n    on(MaterialActions.selectCurrentMaterialSuccess,\r\n        (state, action) => ({...state, currentMaterial: action.data}),\r\n    ),\r\n);\r\n\r\nexport function reducer(state: MaterialState | undefined, action: Action) {\r\n    return materialReducer(state, action);\r\n}\r\n\r\nexport const {\r\n    selectIds,\r\n    selectEntities,\r\n    selectAll,\r\n    selectTotal,\r\n} = adapter.getSelectors();\r\n","import {createFeatureSelector, createSelector} from '@ngrx/store';\r\nimport { Material } from './material';\r\nimport {MaterialState, materialFeatureKey, selectAll} from './material.reducer';\r\n\r\nconst featureState = createFeatureSelector<MaterialState>(materialFeatureKey);\r\n\r\nexport const selectAllMaterials = createSelector(\r\n    featureState,\r\n    selectAll,\r\n);\r\n\r\nexport const allMaterialLoaded = createSelector(\r\n    featureState,\r\n    state => state.allMaterialsLoaded,\r\n);\r\n\r\nexport const selectCurrentMaterial = createSelector(\r\n    featureState,\r\n    state => state.currentMaterial\r\n)\r\n\r\nexport const selecetmaterialbyid = createSelector(\r\n    selectAllMaterials,\r\n    (materials: Material[], id) => {\r\n        const mat = materials.filter(a => a.id == id)\r\n      \r\n        return mat;\r\n\r\n    }\r\n)","import {Injectable} from '@angular/core';\r\nimport {APP_CONFIG} from '../../../../app.config';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {Material} from './material';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class MaterialService {\r\n    private url = `${APP_CONFIG.BASE_URL}/materials/`;\r\n\r\n    constructor(private http: HttpClient) {\r\n    }\r\n\r\n    findAll(): Observable<Material[]> {\r\n        return this.http.get<Material[]>(this.url);\r\n    }\r\n\r\n    save(item: FormData): Observable<Material> {\r\n        if (!item.get('id')) {\r\n            return this.http.post<Material>(this.url, item);\r\n        } else {\r\n            return this.update(item);\r\n        }\r\n    }\r\n   \r\n    private update(item: any): Observable<Material> {\r\n       \r\n        return this.http.put<Material>(`${this.url}${item.get('id')}/`, item);\r\n    }\r\n    delete(item: Material) {\r\n        return this.http.delete(`${this.url}${item.id}/`);\r\n    }\r\n}\r\n"],"sourceRoot":""}