{"version":3,"sources":["webpack:///./node_modules/ng-wizard/fesm2015/ng-wizard.js","webpack:///./src/app/features/productionorder/poheads/poheads.component.html","webpack:///./src/app/features/productionorder/poheads/poheads.component.ts","webpack:///./src/app/features/productionorder/productionorder.module.ts","webpack:///./src/app/features/store/productionorder/pohead/index.ts","webpack:///./src/app/features/store/productionorder/pohead/pohead.actions.ts","webpack:///./src/app/features/store/productionorder/pohead/pohead.effects.ts","webpack:///./src/app/features/store/productionorder/pohead/pohead.reducer.ts","webpack:///./src/app/features/store/productionorder/pohead/pohead.selectors.ts","webpack:///./src/app/features/store/productionorder/pohead/pohead.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwD;AACkO;AACzO;AACF;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,4CAA4C;AAC7C;AACA;AACA;AACA;AACA,CAAC,0DAA0D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sBAAsB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACA;AACA;AACA,CAAC,kCAAkC;AACnC;AACA;AACA;AACA;AACA,CAAC,sCAAsC;AACvC;AACA;AACA;AACA;AACA;AACA,CAAC,sCAAsC;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA,mCAAmC,4DAAc;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;;AAEA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA,gCAAgC,4CAAO;AACvC,iCAAiC,4CAAO;AACxC,qCAAqC,4CAAO;AAC5C,6BAA6B,4CAAO;AACpC,6BAA6B,4CAAO;AACpC,oCAAoC,4CAAO;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,gCAAgC,OAAO,sDAAQ,EAAE,GAAG,OAAO,oDAAM,mCAAmC;AACzG;AACA,4BAA4B,wEAAkB,EAAE,kDAAkD,gCAAgC,8DAAQ,6BAA6B,EAAE,kDAAkD;AAC3N,sBAAsB,wDAAU;AAChC,IAAI,gEAAU;AACd;AACA,KAAK;AACL,IAAI,qDAAO,IAAI,8DAAQ,KAAK,qDAAO,IAAI,4DAAM;AAC7C,IAAI,wDAAU;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,wBAAwB,wEAAkB,EAAE,8CAA8C,4BAA4B,8DAAQ,uBAAuB,EAAE,8CAA8C;AACrM,kBAAkB,wDAAU;AAC5B,IAAI,gEAAU;AACd;AACA,KAAK;AACL,IAAI,wDAAU;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU,gBAAgB,kDAAI;AAClC;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,iEAAW;AACf,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,eAAe,wDAAU;AACzB,IAAI,+DAAS;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,8DAAgB;AAC5B;AACA,+BAA+B,wDAAU;AACzC,IAAI,+DAAS;AACb;AACA,KAAK;AACL,IAAI,wDAAU,uBAAuB,8DAAgB;AACrD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,OAAO,sEAAwB;AACpC;AACA,wDAAU;AACV,IAAI,+DAAS,gCAAgC,eAAe;AAC5D,IAAI,wDAAU;AACd;AACA,kDAAkD,wDAAU;AAC5D,IAAI,+DAAS;AACb;AACA;AACA;AACA,aAAa,qCAAqC,gEAAU;AAC5D;AACA;AACA,KAAK;AACL,IAAI,wDAAU,uBAAuB,sEAAwB;AAC7D;;AAEA;AACA;AACA;AACA,+BAA+B,0DAAY;AAC3C,gCAAgC,0DAAY;AAC5C,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChmBAAmB,+CAAE;AACrB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,mBAAmB,+CAAE;AACrB;AACA;AACA;AACA,oCAAoC,yEAAyE;AAC7G,gBAAgB,yDAAY;AAC5B;AACA;AACA;AACA,uBAAuB,+CAAE;AACzB;AACA;AACA,uBAAuB,+CAAE;AACzB;AACA;AACA,eAAe,+CAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,wDAAU;AACV,IAAI,qEAAe;AACnB,IAAI,wDAAU,gBAAgB,uDAAS;AACvC;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,4DAAM;AACV,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,4DAAM;AACV,IAAI,wDAAU;AACd;AACA,wDAAU;AACV,IAAI,4DAAM;AACV,IAAI,wDAAU;AACd;AACA,oBAAoB,wDAAU;AAC9B,IAAI,+DAAS;AACb;AACA,4JAA4J,wFAAwF,KAAK,gHAAgH,cAAc,eAAe,oBAAoB,qWAAqW,0BAA0B,iKAAiK,sBAAsB,yOAAyO,yHAAyH,eAAe,wdAAwd,0BAA0B,iKAAiK,sBAAsB,yOAAyO,yHAAyH,eAAe;AAC31E;AACA,KAAK;AACL,IAAI,wDAAU;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,wDAAU;AAC9C,IAAI,8DAAQ;AACZ,kBAAkB,4DAAY;AAC9B;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAE4R;AAC5R;;;;;;;;;;;;ACxsBA,k4DAAk4D,oD;;;;;;;;;;;;;;;;;;;ACCh1D;AAGb;AAM+E;AAOpH,IAAa,gBAAgB,GAA7B,MAAa,gBAAgB;IAmB3B,YAAoB,e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","file":"features-productionorder-productionorder-module-es2015.js","sourcesContent":["import { __decorate, __param, __metadata } from 'tslib';\nimport { InjectionToken, Optional, Inject, ɵɵdefineInjectable, ɵɵinject, Injectable, Input, Type, HostBinding, Directive, ViewContainerRef, ComponentFactoryResolver, ViewChild, Component, forwardRef, EventEmitter, ContentChildren, QueryList, Output, NgModule } from '@angular/core';\nimport { Subject, of, isObservable } from 'rxjs';\nimport { CommonModule } from '@angular/common';\n\nvar TOOLBAR_POSITION;\r\n(function (TOOLBAR_POSITION) {\r\n    TOOLBAR_POSITION[\"none\"] = \"none\";\r\n    TOOLBAR_POSITION[\"top\"] = \"top\";\r\n    TOOLBAR_POSITION[\"bottom\"] = \"bottom\";\r\n    TOOLBAR_POSITION[\"both\"] = \"both\";\r\n})(TOOLBAR_POSITION || (TOOLBAR_POSITION = {}));\r\nvar TOOLBAR_BUTTON_POSITION;\r\n(function (TOOLBAR_BUTTON_POSITION) {\r\n    TOOLBAR_BUTTON_POSITION[\"start\"] = \"start\";\r\n    TOOLBAR_BUTTON_POSITION[\"end\"] = \"end\";\r\n})(TOOLBAR_BUTTON_POSITION || (TOOLBAR_BUTTON_POSITION = {}));\r\n// export enum TRANSITION_EFFECT {\r\n//     none = 'none',\r\n//     slide = 'slide',\r\n//     fade = 'fade'\r\n// }\r\nvar THEME;\r\n(function (THEME) {\r\n    THEME[\"default\"] = \"default\";\r\n    THEME[\"arrows\"] = \"arrows\";\r\n    THEME[\"circles\"] = \"circles\";\r\n    THEME[\"dots\"] = \"dots\";\r\n})(THEME || (THEME = {}));\r\nvar STEP_STATE;\r\n(function (STEP_STATE) {\r\n    STEP_STATE[\"normal\"] = \"normal\";\r\n    STEP_STATE[\"disabled\"] = \"disabled\";\r\n    STEP_STATE[\"error\"] = \"error\";\r\n    STEP_STATE[\"hidden\"] = \"hidden\";\r\n})(STEP_STATE || (STEP_STATE = {}));\r\nvar STEP_STATUS;\r\n(function (STEP_STATUS) {\r\n    STEP_STATUS[\"untouched\"] = \"untouched\";\r\n    STEP_STATUS[\"done\"] = \"done\";\r\n    STEP_STATUS[\"active\"] = \"active\";\r\n})(STEP_STATUS || (STEP_STATUS = {}));\r\nvar STEP_DIRECTIN;\r\n(function (STEP_DIRECTIN) {\r\n    STEP_DIRECTIN[\"forward\"] = \"forward\";\r\n    STEP_DIRECTIN[\"backward\"] = \"backward\";\r\n})(STEP_DIRECTIN || (STEP_DIRECTIN = {}));\r\nvar STEP_POSITION;\r\n(function (STEP_POSITION) {\r\n    STEP_POSITION[\"first\"] = \"first\";\r\n    STEP_POSITION[\"final\"] = \"final\";\r\n    STEP_POSITION[\"middle\"] = \"middle\";\r\n})(STEP_POSITION || (STEP_POSITION = {}));\n\nconst DEFAULT_CONFIG = {\r\n    selected: 0,\r\n    keyNavigation: true,\r\n    cycleSteps: false,\r\n    lang: {\r\n        next: 'Next',\r\n        previous: 'Previous'\r\n    },\r\n    toolbarSettings: {\r\n        toolbarPosition: TOOLBAR_POSITION.bottom,\r\n        toolbarButtonPosition: TOOLBAR_BUTTON_POSITION.end,\r\n        showNextButton: true,\r\n        showPreviousButton: true,\r\n        toolbarExtraButtons: []\r\n    },\r\n    anchorSettings: {\r\n        anchorClickable: true,\r\n        enableAllAnchors: false,\r\n        markDoneStep: true,\r\n        markAllPreviousStepsAsDone: true,\r\n        removeDoneStepOnNavigateBack: false,\r\n        enableAnchorOnDoneStep: true\r\n    },\r\n    theme: THEME.default,\r\n};\n\nconst NG_WIZARD_CONFIG_TOKEN = new InjectionToken('ngWizardCustom.config');\n\n// https://gist.github.com/ahtcx/0cd94e62691f539160b32ecda18af3d6\r\n// Merge a `source` object to a `target` recursively\r\nfunction merge(target, source) {\r\n    // Iterate through `source` properties and if an `Object` set property to merge of `target` and `source` properties\r\n    for (let key of Object.keys(source)) {\r\n        if (source[key] instanceof Object && key in target) {\r\n            Object.assign(source[key], merge(target[key], source[key]));\r\n        }\r\n    }\r\n    // Join `target` and modified `source`\r\n    Object.assign(target || {}, source);\r\n    return target;\r\n}\n\nlet NgWizardDataService = class NgWizardDataService {\r\n    constructor(config) {\r\n        this.config = config;\r\n        this._defaultConfig = Object.assign({}, DEFAULT_CONFIG);\r\n        if (this.config) {\r\n            this._defaultConfig = merge(this._defaultConfig, this.config);\r\n        }\r\n        // Observable sources\r\n        this._resetWizard = new Subject();\r\n        this._showNextStep = new Subject();\r\n        this._showPreviousStep = new Subject();\r\n        this._showStep = new Subject();\r\n        this._setTheme = new Subject();\r\n        this._stepChangedArgs = new Subject();\r\n        // Observable streams\r\n        this.resetWizard$ = this._resetWizard.asObservable();\r\n        this.showNextStep$ = this._showNextStep.asObservable();\r\n        this.showPreviousStep$ = this._showPreviousStep.asObservable();\r\n        this.showStep$ = this._showStep.asObservable();\r\n        this.setTheme$ = this._setTheme.asObservable();\r\n        this.stepChangedArgs$ = this._stepChangedArgs.asObservable();\r\n    }\r\n    getDefaultConfig() {\r\n        return Object.assign({}, this._defaultConfig);\r\n    }\r\n    resetWizard() {\r\n        this._resetWizard.next();\r\n    }\r\n    showNextStep() {\r\n        this._showNextStep.next();\r\n    }\r\n    showPreviousStep() {\r\n        this._showPreviousStep.next();\r\n    }\r\n    showStep(index) {\r\n        this._showStep.next(index);\r\n    }\r\n    setTheme(theme) {\r\n        this._setTheme.next(theme);\r\n    }\r\n    stepChanged(args) {\r\n        this._stepChangedArgs.next(args);\r\n    }\r\n};\r\nNgWizardDataService.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_WIZARD_CONFIG_TOKEN,] }] }\r\n];\r\nNgWizardDataService.ɵprov = ɵɵdefineInjectable({ factory: function NgWizardDataService_Factory() { return new NgWizardDataService(ɵɵinject(NG_WIZARD_CONFIG_TOKEN, 8)); }, token: NgWizardDataService, providedIn: \"root\" });\r\nNgWizardDataService = __decorate([\r\n    Injectable({\r\n        providedIn: 'root'\r\n    }),\r\n    __param(0, Optional()), __param(0, Inject(NG_WIZARD_CONFIG_TOKEN)),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], NgWizardDataService);\n\nlet NgWizardService = class NgWizardService {\r\n    constructor(ngWizardDataService) {\r\n        this.ngWizardDataService = ngWizardDataService;\r\n    }\r\n    reset() {\r\n        this.ngWizardDataService.resetWizard();\r\n    }\r\n    next() {\r\n        this.ngWizardDataService.showNextStep();\r\n    }\r\n    previous() {\r\n        this.ngWizardDataService.showPreviousStep();\r\n    }\r\n    show(index) {\r\n        this.ngWizardDataService.showStep(index);\r\n    }\r\n    theme(theme) {\r\n        this.ngWizardDataService.setTheme(theme);\r\n    }\r\n    stepChanged() {\r\n        return this.ngWizardDataService.stepChangedArgs$;\r\n    }\r\n};\r\nNgWizardService.ctorParameters = () => [\r\n    { type: NgWizardDataService }\r\n];\r\nNgWizardService.ɵprov = ɵɵdefineInjectable({ factory: function NgWizardService_Factory() { return new NgWizardService(ɵɵinject(NgWizardDataService)); }, token: NgWizardService, providedIn: \"root\" });\r\nNgWizardService = __decorate([\r\n    Injectable({\r\n        providedIn: 'root'\r\n    }),\r\n    __metadata(\"design:paramtypes\", [NgWizardDataService])\r\n], NgWizardService);\n\nlet NgWizardStep = class NgWizardStep {\r\n    get hidden() {\r\n        return this.status != STEP_STATUS.active;\r\n    }\r\n};\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], NgWizardStep.prototype, \"title\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], NgWizardStep.prototype, \"description\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], NgWizardStep.prototype, \"state\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Type)\r\n], NgWizardStep.prototype, \"component\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], NgWizardStep.prototype, \"canEnter\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], NgWizardStep.prototype, \"canExit\", void 0);\r\n__decorate([\r\n    HostBinding('hidden'),\r\n    __metadata(\"design:type\", Boolean),\r\n    __metadata(\"design:paramtypes\", [])\r\n], NgWizardStep.prototype, \"hidden\", null);\r\nNgWizardStep = __decorate([\r\n    Directive()\r\n], NgWizardStep);\n\nlet NgWizardStepContentDirective = class NgWizardStepContentDirective {\r\n    constructor(viewContainerRef) {\r\n        this.viewContainerRef = viewContainerRef;\r\n    }\r\n};\r\nNgWizardStepContentDirective.ctorParameters = () => [\r\n    { type: ViewContainerRef }\r\n];\r\nNgWizardStepContentDirective = __decorate([\r\n    Directive({\r\n        selector: '[ngWizardStepContent]'\r\n    }),\r\n    __metadata(\"design:paramtypes\", [ViewContainerRef])\r\n], NgWizardStepContentDirective);\n\nvar NgWizardStepComponent_1;\r\nlet NgWizardStepComponent = NgWizardStepComponent_1 = class NgWizardStepComponent extends NgWizardStep {\r\n    constructor(componentFactoryResolver) {\r\n        super();\r\n        this.componentFactoryResolver = componentFactoryResolver;\r\n    }\r\n    ngOnInit() {\r\n        this.loadComponent();\r\n    }\r\n    loadComponent() {\r\n        if (!this.component) {\r\n            return;\r\n        }\r\n        let componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.component);\r\n        this.stepContent.viewContainerRef.clear();\r\n        this.componentRef = this.stepContent.viewContainerRef.createComponent(componentFactory);\r\n    }\r\n    get isHidden() {\r\n        return this.state == STEP_STATE.hidden;\r\n    }\r\n};\r\nNgWizardStepComponent.ctorParameters = () => [\r\n    { type: ComponentFactoryResolver }\r\n];\r\n__decorate([\r\n    ViewChild(NgWizardStepContentDirective, { static: true }),\r\n    __metadata(\"design:type\", NgWizardStepContentDirective)\r\n], NgWizardStepComponent.prototype, \"stepContent\", void 0);\r\nNgWizardStepComponent = NgWizardStepComponent_1 = __decorate([\r\n    Component({\r\n        selector: 'ng-wizard-step',\r\n        template: \"<div class=\\\"tab-pane step-content\\\" style=\\\"display: block\\\">\\r\\n    <ng-content></ng-content>\\r\\n    <ng-template ngWizardStepContent></ng-template>\\r\\n</div>\",\r\n        providers: [\r\n            { provide: NgWizardStep, useExisting: forwardRef(() => NgWizardStepComponent_1) }\r\n        ],\r\n        styles: [\"\"]\r\n    }),\r\n    __metadata(\"design:paramtypes\", [ComponentFactoryResolver])\r\n], NgWizardStepComponent);\n\nlet NgWizardComponent = class NgWizardComponent {\r\n    constructor(ngWizardDataService) {\r\n        this.ngWizardDataService = ngWizardDataService;\r\n        this.stepChanged = new EventEmitter();\r\n        this.themeChanged = new EventEmitter();\r\n        this.reseted = new EventEmitter();\r\n        this.styles = {};\r\n        this.showToolbarTop = false;\r\n        this.showPreviousButton = false;\r\n        this.showNextButton = false;\r\n        this.showToolbarBottom = false;\r\n        this.showExtraButtons = false;\r\n        this.currentStepIndex = null; // Active step index\r\n    }\r\n    get pConfig() {\r\n        return this._pConfig || {};\r\n    }\r\n    set pConfig(config) {\r\n        this._pConfig = config;\r\n    }\r\n    ngAfterContentInit() {\r\n        this._backupStepStates();\r\n        this._init();\r\n        // Set toolbar\r\n        this._setToolbar();\r\n        // Assign plugin events\r\n        this._setEvents();\r\n        this.resetWizardWatcher = this.ngWizardDataService.resetWizard$.subscribe(() => this._reset());\r\n        this.showNextStepWatcher = this.ngWizardDataService.showNextStep$.subscribe(() => this._showNextStep());\r\n        this.showPreviousStepWatcher = this.ngWizardDataService.showPreviousStep$.subscribe(() => this._showPreviousStep());\r\n        this.showStepWatcher = this.ngWizardDataService.showStep$.subscribe(index => this._showStep(index));\r\n        this.setThemeWatcher = this.ngWizardDataService.setTheme$.subscribe(theme => this._setTheme(theme));\r\n    }\r\n    _init() {\r\n        // set config\r\n        let defaultConfig = this.ngWizardDataService.getDefaultConfig();\r\n        this.config = merge(defaultConfig, this.pConfig);\r\n        // set step states\r\n        this._initSteps();\r\n        // Set the elements\r\n        this._initStyles();\r\n        // Show the initial step\r\n        this._showStep(this.config.selected);\r\n    }\r\n    _initSteps() {\r\n        this.steps.forEach((step, index) => {\r\n            step.index = index;\r\n            step.status = step.status || STEP_STATUS.untouched;\r\n            step.state = step.state || STEP_STATE.normal;\r\n        });\r\n        // Mark previous steps of the active step as done\r\n        if (this.config.selected > 0\r\n            && this.config.anchorSettings.markDoneStep\r\n            && this.config.anchorSettings.markAllPreviousStepsAsDone) {\r\n            this.steps.forEach(step => {\r\n                if (step.state != STEP_STATE.disabled && step.state != STEP_STATE.hidden) {\r\n                    step.status = step.index < this.config.selected ? STEP_STATUS.done : step.status;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    _backupStepStates() {\r\n        this.steps.forEach(step => {\r\n            step.initialStatus = step.status;\r\n            step.initialState = step.state;\r\n        });\r\n    }\r\n    _restoreStepStates() {\r\n        this.steps.forEach(step => {\r\n            step.status = step.initialStatus;\r\n            step.state = step.initialState;\r\n        });\r\n    }\r\n    // PRIVATE FUNCTIONS\r\n    _initStyles() {\r\n        // Set the main element\r\n        this.styles.main = 'ng-wizard-main ng-wizard-theme-' + this.config.theme;\r\n        // Set anchor elements\r\n        this.styles.step = 'nav-item'; // li\r\n        // Make the anchor clickable\r\n        if (this.config.anchorSettings.enableAllAnchors && this.config.anchorSettings.anchorClickable) {\r\n            this.styles.step += ' clickable';\r\n        }\r\n        // Set the toolbar styles\r\n        this.styles.toolbarTop = 'btn-toolbar ng-wizard-toolbar ng-wizard-toolbar-top justify-content-' + this.config.toolbarSettings.toolbarButtonPosition;\r\n        this.styles.toolbarBottom = 'btn-toolbar ng-wizard-toolbar ng-wizard-toolbar-bottom justify-content-' + this.config.toolbarSettings.toolbarButtonPosition;\r\n        // Set previous&next buttons \r\n        this.styles.previousButton = 'btn btn-secondary ng-wizard-btn-prev';\r\n        this.styles.nextButton = 'btn btn-secondary ng-wizard-btn-next';\r\n    }\r\n    _setToolbar() {\r\n        this.showToolbarTop = this.config.toolbarSettings.toolbarPosition == TOOLBAR_POSITION.top ||\r\n            this.config.toolbarSettings.toolbarPosition == TOOLBAR_POSITION.both;\r\n        this.showToolbarBottom = this.config.toolbarSettings.toolbarPosition == TOOLBAR_POSITION.bottom ||\r\n            this.config.toolbarSettings.toolbarPosition == TOOLBAR_POSITION.both;\r\n        this.showPreviousButton = this.config.toolbarSettings.showPreviousButton;\r\n        this.showNextButton = this.config.toolbarSettings.showNextButton;\r\n        this.showExtraButtons = this.config.toolbarSettings.toolbarExtraButtons && this.config.toolbarSettings.toolbarExtraButtons.length > 0;\r\n    }\r\n    _setEvents() {\r\n        //TODO: keyNavigation\r\n        // Keyboard navigation event\r\n        if (this.config.keyNavigation) {\r\n            // $(document).keyup(function (e) {\r\n            //   mi._keyNav(e);\r\n            // });\r\n        }\r\n    }\r\n    _getStepCssClass(selectedStep) {\r\n        let stepClass = this.styles.step;\r\n        switch (selectedStep.state) {\r\n            case STEP_STATE.disabled:\r\n                stepClass += ' disabled';\r\n                break;\r\n            case STEP_STATE.error:\r\n                stepClass += ' danger';\r\n                break;\r\n            case STEP_STATE.hidden:\r\n                stepClass += ' hidden';\r\n                break;\r\n        }\r\n        switch (selectedStep.status) {\r\n            case STEP_STATUS.done:\r\n                stepClass += ' done';\r\n                break;\r\n            case STEP_STATUS.active:\r\n                stepClass += ' active';\r\n                break;\r\n        }\r\n        return stepClass;\r\n    }\r\n    _showSelectedStep(event, selectedStep) {\r\n        event.preventDefault();\r\n        if (!this.config.anchorSettings.anchorClickable) {\r\n            return;\r\n        }\r\n        if (!this.config.anchorSettings.enableAnchorOnDoneStep && selectedStep.status == STEP_STATUS.done) {\r\n            return true;\r\n        }\r\n        if (selectedStep.index != this.currentStepIndex) {\r\n            if (this.config.anchorSettings.enableAllAnchors && this.config.anchorSettings.anchorClickable) {\r\n                this._showStep(selectedStep.index);\r\n            }\r\n            else {\r\n                if (selectedStep.status == STEP_STATUS.done) {\r\n                    this._showStep(selectedStep.index);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _showNextStep(event) {\r\n        if (event) {\r\n            event.preventDefault();\r\n        }\r\n        // Find the next not disabled & hidden step\r\n        let filteredSteps = this.steps.filter(step => {\r\n            return step.index > (this.currentStepIndex == null ? -1 : this.currentStepIndex)\r\n                && step.state != STEP_STATE.disabled\r\n                && step.state != STEP_STATE.hidden;\r\n        });\r\n        if (filteredSteps.length == 0) {\r\n            if (!this.config.cycleSteps) {\r\n                return;\r\n            }\r\n            this._showStep(0);\r\n        }\r\n        else {\r\n            this._showStep(filteredSteps.shift().index);\r\n        }\r\n    }\r\n    _showPreviousStep(event) {\r\n        if (event) {\r\n            event.preventDefault();\r\n        }\r\n        // Find the previous not disabled & hidden step\r\n        let filteredSteps = this.steps.filter(step => {\r\n            return step.index < (this.currentStepIndex == null && this.config.cycleSteps ? this.steps.length : this.currentStepIndex)\r\n                && step.state != STEP_STATE.disabled\r\n                && step.state != STEP_STATE.hidden;\r\n        });\r\n        if (filteredSteps.length == 0) {\r\n            if (!this.config.cycleSteps) {\r\n                return;\r\n            }\r\n            this._showStep(this.steps.length - 1);\r\n        }\r\n        else {\r\n            this._showStep(filteredSteps.pop().index);\r\n        }\r\n    }\r\n    _showStep(selectedStepIndex) {\r\n        // If step not found, skip\r\n        if (selectedStepIndex >= this.steps.length || selectedStepIndex < 0) {\r\n            return;\r\n        }\r\n        // If current step is requested again, skip\r\n        if (selectedStepIndex == this.currentStepIndex) {\r\n            return;\r\n        }\r\n        let selectedStep = this.steps.toArray()[selectedStepIndex];\r\n        // If it is a disabled or hidden step, skip\r\n        if (selectedStep.state == STEP_STATE.disabled || selectedStep.state == STEP_STATE.hidden) {\r\n            return;\r\n        }\r\n        this._showLoader();\r\n        return this._isStepChangeValid(selectedStep, this.currentStep && this.currentStep.canExit).toPromise()\r\n            .then(isValid => {\r\n            if (isValid) {\r\n                return this._isStepChangeValid(selectedStep, selectedStep.canEnter).toPromise();\r\n            }\r\n            return of(isValid).toPromise();\r\n        })\r\n            .then(isValid => {\r\n            if (isValid) {\r\n                // Load step content\r\n                this._loadStepContent(selectedStep);\r\n            }\r\n        })\r\n            .finally(() => this._hideLoader());\r\n    }\r\n    _isStepChangeValid(selectedStep, condition) {\r\n        if (typeof condition === typeof true) {\r\n            return of(condition);\r\n        }\r\n        else if (condition instanceof Function) {\r\n            let direction = this._getStepDirection(selectedStep.index);\r\n            let result = condition({ direction: direction, fromStep: this.currentStep, toStep: selectedStep });\r\n            if (isObservable(result)) {\r\n                return result;\r\n            }\r\n            else if (typeof result === typeof true) {\r\n                return of(result);\r\n            }\r\n            else {\r\n                return of(false);\r\n            }\r\n        }\r\n        return of(true);\r\n    }\r\n    _loadStepContent(selectedStep) {\r\n        // Update controls\r\n        this._setAnchor(selectedStep);\r\n        // Set the buttons based on the step\r\n        this._setButtons(selectedStep.index);\r\n        // Trigger \"stepChanged\" event\r\n        const args = {\r\n            step: selectedStep,\r\n            previousStep: this.currentStep,\r\n            direction: this._getStepDirection(selectedStep.index),\r\n            position: this._getStepPosition(selectedStep.index)\r\n        };\r\n        this.stepChanged.emit(args);\r\n        this.ngWizardDataService.stepChanged(args);\r\n        // Update the current index\r\n        this.currentStepIndex = selectedStep.index;\r\n        this.currentStep = selectedStep;\r\n    }\r\n    _setAnchor(selectedStep) {\r\n        // Current step anchor > Remove other classes and add done class\r\n        if (this.currentStep) {\r\n            this.currentStep.status = STEP_STATUS.untouched;\r\n            if (this.config.anchorSettings.markDoneStep) {\r\n                this.currentStep.status = STEP_STATUS.done;\r\n                if (this.config.anchorSettings.removeDoneStepOnNavigateBack) {\r\n                    this.steps.forEach(step => {\r\n                        if (step.index > selectedStep.index) {\r\n                            step.status = STEP_STATUS.untouched;\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        // Next step anchor > Remove other classes and add active class\r\n        selectedStep.status = STEP_STATUS.active;\r\n    }\r\n    _setButtons(index) {\r\n        // Previous/Next Button enable/disable based on step\r\n        if (!this.config.cycleSteps) {\r\n            if (0 >= index) {\r\n                this.styles.previousButton = 'btn btn-secondary ng-wizard-btn-prev disabled';\r\n            }\r\n            else {\r\n                this.styles.previousButton = 'btn btn-secondary ng-wizard-btn-prev';\r\n            }\r\n            if (this.steps.length - 1 <= index) {\r\n                this.styles.nextButton = 'btn btn-secondary ng-wizard-btn-next disabled';\r\n            }\r\n            else {\r\n                this.styles.nextButton = 'btn btn-secondary ng-wizard-btn-next';\r\n            }\r\n        }\r\n    }\r\n    _extraButtonClicked(button) {\r\n        if (button.event) {\r\n            button.event();\r\n        }\r\n    }\r\n    // HELPER FUNCTIONS\r\n    _keyNav(event) {\r\n        // Keyboard navigation\r\n        switch (event.which) {\r\n            case 37:\r\n                // left\r\n                this._showPreviousStep(event);\r\n                event.preventDefault();\r\n                break;\r\n            case 39:\r\n                // right\r\n                this._showNextStep(event);\r\n                event.preventDefault();\r\n                break;\r\n            default:\r\n                return; // exit this handler for other keys\r\n        }\r\n    }\r\n    _showLoader() {\r\n        this.styles.main = 'ng-wizard-main ng-wizard-theme-' + this.config.theme + ' ng-wizard-loading';\r\n    }\r\n    _hideLoader() {\r\n        this.styles.main = 'ng-wizard-main ng-wizard-theme-' + this.config.theme;\r\n    }\r\n    _getStepDirection(selectedStepIndex) {\r\n        return (this.currentStepIndex != null && this.currentStepIndex != selectedStepIndex) ?\r\n            (this.currentStepIndex < selectedStepIndex ? STEP_DIRECTIN.forward : STEP_DIRECTIN.backward) : null;\r\n    }\r\n    _getStepPosition(selectedStepIndex) {\r\n        return (selectedStepIndex == 0) ? STEP_POSITION.first : (selectedStepIndex == this.steps.length - 1 ? STEP_POSITION.final : STEP_POSITION.middle);\r\n    }\r\n    // PUBLIC FUNCTIONS\r\n    _setTheme(theme) {\r\n        if (this.config.theme == theme) {\r\n            return false;\r\n        }\r\n        this.config.theme = theme;\r\n        this.styles.main = 'ng-wizard-main ng-wizard-theme-' + this.config.theme;\r\n        // Trigger \"themeChanged\" event\r\n        this.themeChanged.emit(this.config.theme);\r\n    }\r\n    _reset() {\r\n        // Reset all elements and classes\r\n        this.currentStepIndex = null;\r\n        this.currentStep = null;\r\n        this._restoreStepStates();\r\n        this._init();\r\n        // Trigger \"reseted\" event\r\n        this.reseted.emit();\r\n    }\r\n    ngOnDestroy() {\r\n        if (this.resetWizardWatcher) {\r\n            this.resetWizardWatcher.unsubscribe();\r\n        }\r\n        if (this.showNextStepWatcher) {\r\n            this.showNextStepWatcher.unsubscribe();\r\n        }\r\n        if (this.showPreviousStepWatcher) {\r\n            this.showPreviousStepWatcher.unsubscribe();\r\n        }\r\n        if (this.showStepWatcher) {\r\n            this.showStepWatcher.unsubscribe();\r\n        }\r\n        if (this.setThemeWatcher) {\r\n            this.setThemeWatcher.unsubscribe();\r\n        }\r\n    }\r\n};\r\nNgWizardComponent.ctorParameters = () => [\r\n    { type: NgWizardDataService }\r\n];\r\n__decorate([\r\n    ContentChildren(NgWizardStep),\r\n    __metadata(\"design:type\", QueryList)\r\n], NgWizardComponent.prototype, \"steps\", void 0);\r\n__decorate([\r\n    Input('config'),\r\n    __metadata(\"design:type\", Object),\r\n    __metadata(\"design:paramtypes\", [Object])\r\n], NgWizardComponent.prototype, \"pConfig\", null);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], NgWizardComponent.prototype, \"stepChanged\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], NgWizardComponent.prototype, \"themeChanged\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], NgWizardComponent.prototype, \"reseted\", void 0);\r\nNgWizardComponent = __decorate([\r\n    Component({\r\n        selector: 'ng-wizard',\r\n        template: \"<div id=\\\"ngwizard\\\" [ngClass]=\\\"styles.main\\\">\\r\\n    <ul class=\\\"nav nav-tabs step-anchor\\\">\\r\\n        <li *ngFor=\\\"let step of steps; let i = index\\\" [ngClass]=\\\"_getStepCssClass(step)\\\">\\r\\n            <a href=\\\"#step-{{ i }}\\\" (click)=\\\"_showSelectedStep($event, step)\\\" *ngIf=\\\"!step.isHidden\\\"\\r\\n                class=\\\"nav-link\\\">{{ step.title }}<br /><small>{{ step.description }}</small></a>\\r\\n        </li>\\r\\n    </ul>\\r\\n\\r\\n    <div *ngIf=\\\"showToolbarTop\\\" [ngClass]=\\\"styles.toolbarTop\\\">\\r\\n        <div class=\\\"btn-group mr-2 ng-wizard-btn-group\\\" role=\\\"group\\\">\\r\\n            <button *ngIf=\\\"showPreviousButton\\\" [ngClass]=\\\"styles.previousButton\\\" type=\\\"button\\\"\\r\\n                (click)=\\\"_showPreviousStep($event)\\\">{{ config!.lang!.previous }}</button>\\r\\n            <button *ngIf=\\\"showNextButton\\\" [ngClass]=\\\"styles.nextButton\\\" type=\\\"button\\\"\\r\\n                (click)=\\\"_showNextStep($event)\\\">{{ config!.lang!.next }}</button>\\r\\n        </div>\\r\\n\\r\\n        <div *ngIf=\\\"showExtraButtons\\\" class=\\\"btn-group mr-2 ng-wizard-btn-group-extra\\\" role=\\\"group\\\">\\r\\n            <button *ngFor=\\\"let button of config!.toolbarSettings!.toolbarExtraButtons; let j = index\\\"\\r\\n                [ngClass]=\\\"button.class\\\" type=\\\"button\\\" (click)=\\\"_extraButtonClicked(button)\\\">{{ button.text }}</button>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"ng-wizard-container tab-content\\\">\\r\\n        <ng-content></ng-content>\\r\\n    </div>\\r\\n\\r\\n    <div *ngIf=\\\"showToolbarBottom\\\" [ngClass]=\\\"styles.toolbarBottom\\\">\\r\\n        <div class=\\\"btn-group mr-2 ng-wizard-btn-group\\\" role=\\\"group\\\">\\r\\n            <button *ngIf=\\\"showPreviousButton\\\" [ngClass]=\\\"styles.previousButton\\\" type=\\\"button\\\"\\r\\n                (click)=\\\"_showPreviousStep($event)\\\">{{ config!.lang!.previous }}</button>\\r\\n            <button *ngIf=\\\"showNextButton\\\" [ngClass]=\\\"styles.nextButton\\\" type=\\\"button\\\"\\r\\n                (click)=\\\"_showNextStep($event)\\\">{{ config!.lang!.next }}</button>\\r\\n        </div>\\r\\n\\r\\n        <div *ngIf=\\\"showExtraButtons\\\" class=\\\"btn-group mr-2 ng-wizard-btn-group-extra\\\" role=\\\"group\\\">\\r\\n            <button *ngFor=\\\"let button of config!.toolbarSettings!.toolbarExtraButtons; let j = index\\\"\\r\\n                [ngClass]=\\\"button.class\\\" type=\\\"button\\\" (click)=\\\"_extraButtonClicked(button)\\\">{{ button.text }}</button>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\",\r\n        styles: [\"\"]\r\n    }),\r\n    __metadata(\"design:paramtypes\", [NgWizardDataService])\r\n], NgWizardComponent);\n\nvar NgWizardModule_1;\r\nlet NgWizardModule = NgWizardModule_1 = class NgWizardModule {\r\n    /**\r\n     * forRoot\r\n     * @returns A module with its provider dependencies\r\n     */\r\n    static forRoot(ngWizardConfig) {\r\n        return {\r\n            ngModule: NgWizardModule_1,\r\n            providers: [\r\n                {\r\n                    provide: NG_WIZARD_CONFIG_TOKEN,\r\n                    useValue: ngWizardConfig\r\n                }\r\n            ]\r\n        };\r\n    }\r\n};\r\nNgWizardModule = NgWizardModule_1 = __decorate([\r\n    NgModule({\r\n        imports: [CommonModule],\r\n        declarations: [NgWizardComponent, NgWizardStepComponent, NgWizardStepContentDirective],\r\n        exports: [NgWizardComponent, NgWizardStepComponent]\r\n    })\r\n], NgWizardModule);\n\n/*\r\n * Public API Surface of ng-wizard\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgWizardComponent, NgWizardModule, NgWizardService, NgWizardStep, NgWizardStepComponent, STEP_DIRECTIN, STEP_POSITION, STEP_STATE, THEME, TOOLBAR_BUTTON_POSITION, TOOLBAR_POSITION, NgWizardDataService as ɵa, NG_WIZARD_CONFIG_TOKEN as ɵb, NgWizardStepContentDirective as ɵc };\n//# sourceMappingURL=ng-wizard.js.map\n","module.exports = \"<ng-wizard [config]=\\\"config\\\" (stepChanged)=\\\"stepChanged($event)\\\">\\r\\n  \\r\\n    <ng-wizard-step [title]=\\\"'Step 1'\\\" [description]=\\\"'Step 1 description'\\\"\\r\\n      [canEnter]=\\\"isValidTypeBoolean\\\" [canExit]=\\\"isValidFunctionReturnsBoolean.bind(this)\\\">\\r\\n      <span>Step 1 content</span>\\r\\n    </ng-wizard-step>\\r\\n    \\r\\n    <ng-wizard-step [title]=\\\"'Step 2'\\\" [description]=\\\"'Step 2 description'\\\" [state]=\\\"stepStates.disabled\\\">\\r\\n      <span>Step 2 content</span>\\r\\n    </ng-wizard-step>\\r\\n    \\r\\n    <ng-wizard-step [title]=\\\"'Step 3'\\\" [description]=\\\"'Step 3 description'\\\"\\r\\n      [canEnter]=\\\"isValidFunctionReturnsObservable.bind(this)\\\" [canExit]=\\\"isValidFunctionReturnsBoolean.bind(this)\\\">\\r\\n      <span>Step 3 content</span>\\r\\n    </ng-wizard-step>\\r\\n   \\r\\n  <ng-wizard-step [title]=\\\"'Step 4'\\\" [description]=\\\"'Step 4 description'\\\">\\r\\n      <span>Step 4 content</span>\\r\\n    </ng-wizard-step>\\r\\n   \\r\\n    <ng-wizard-step [title]=\\\"'Step 5'\\\" [description]=\\\"'Step 5 description'\\\" [state]=\\\"stepStates.hidden\\\">\\r\\n      <span>Step 5 content</span>\\r\\n    </ng-wizard-step>\\r\\n    \\r\\n    <ng-wizard-step [title]=\\\"'Step 6'\\\" [description]=\\\"'Step 6 description'\\\" [state]=\\\"stepStates.error\\\">\\r\\n      <span>Step 6 content</span>\\r\\n    </ng-wizard-step>\\r\\n    \\r\\n    <ng-wizard-step [title]=\\\"'Step 7'\\\" [description]=\\\"'Step 7 description'\\\">\\r\\n      <span>Step 7 content</span>\\r\\n    </ng-wizard-step>\\r\\n  </ng-wizard>\\r\\n<!-- <smart-crud-panel \\r\\n    title=\\\"Poheads\\\" \\r\\n    icon=\\\"fal fa-users\\\" \\r\\n    [columns]=\\\"columns\\\"\\r\\n    [selectAllSelector]=\\\"selectAllSelector\\\"\\r\\n    [selectCurrent]=\\\"selectCurrent\\\"\\r\\n    [form] =\\\"form\\\"\\r\\n    [deleteable]=\\\"true\\\"\\r\\n    [editable]=\\\"true\\\"\\r\\n    formTitle=\\\"Pohead\\\"\\r\\n    itemName=\\\"Pohead\\\"\\r\\n    modalClass ='modal-lg'\\r\\n    >\\r\\n\\r\\n    <h2 title><i class=\\\"fal fa-list\\\"></i>&nbsp;Po Head</h2>\\r\\n    \\r\\n</smart-crud-panel> -->\\r\\n\"","import { selectCurrentPohead,selectAllPoheads, Pohead ,loadPoheads} from './../../store/productionorder/pohead';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { RowData } from 'src/app/shared';\r\nimport { Validators } from '@angular/forms';\r\nimport { Observable,of } from 'rxjs';\r\nimport { TableData } from 'src/app/shared/custom-tables/table/table.component';\r\nimport { Store } from '@ngrx/store';\r\nimport {Client ,loadClients,selectAllClients} from './../../store/customer/client';\r\nimport {Customer ,loadCustomers,selectAllCustomers} from './../../store/customer/customer';\r\nimport {Factorycode ,loadFactorycodes,selectAllFactorycodes} from './../../store/settings/factorycode';\r\nimport { NgWizardConfig, NgWizardService, StepChangedArgs, StepValidationArgs, STEP_STATE, THEME } from 'ng-wizard';\r\n\r\n@Component({\r\n  selector: 'smart-poheads',\r\n  templateUrl: './poheads.component.html',\r\n  styles: []\r\n})\r\nexport class PoheadsComponent implements OnInit {\r\n  \r\n  stepStates = {\r\n    normal: STEP_STATE.normal,\r\n    disabled: STEP_STATE.disabled,\r\n    error: STEP_STATE.error,\r\n    hidden: STEP_STATE.hidden\r\n  };\r\n \r\n  config: NgWizardConfig = {\r\n    selected: 0,\r\n    theme: THEME.arrows,\r\n    toolbarSettings: {\r\n      toolbarExtraButtons: [\r\n        { text: 'Finish', class: 'btn btn-info', event: () => { alert(\"Finished!!!\"); } }\r\n      ],\r\n    }\r\n  };\r\n \r\n  constructor(private ngWizardService: NgWizardService) {\r\n  }\r\n \r\n  ngOnInit() {\r\n  }\r\n \r\n  showPreviousStep(event?: Event) {\r\n    this.ngWizardService.previous();\r\n  }\r\n \r\n  showNextStep(event?: Event) {\r\n    this.ngWizardService.next();\r\n  }\r\n \r\n  resetWizard(event?: Event) {\r\n    this.ngWizardService.reset();\r\n  }\r\n \r\n  setTheme(theme: THEME) {\r\n    this.ngWizardService.theme(theme);\r\n  }\r\n \r\n  stepChanged(args: StepChangedArgs) {\r\n    console.log(args.step);\r\n  }\r\n \r\n  isValidTypeBoolean: boolean = true;\r\n \r\n  isValidFunctionReturnsBoolean(args: StepValidationArgs) {\r\n    return true;\r\n  }\r\n \r\n  isValidFunctionReturnsObservable(args: StepValidationArgs) {\r\n    return of(true);\r\n  }\r\n  // items: Observable<Pohead[]>\r\n  // client: Observable<Client[]>\r\n  // customer: Observable<Customer[]>\r\n  // factorycode: Observable<Factorycode[]>\r\n  // shipmode = of([{ id: 'By Sea', name: 'By Sea' }, { id: 'By Air', name: 'By Air' },{ id: 'By Courier', name: 'By Courier' }])\r\n  // paymentmode = of([{ id: 'Collect', name: 'Collect' }, { id: 'Prepaid', name: 'Prepaid' }])\r\n  // ordertype = of([{ id: 'Production', name: 'Production' }, { id: 'Development', name: 'Development' }])\r\n  // orderstatus = of([{ id: 'Confirm', name: 'Confirm' }, { id: 'Cancel', name: 'Cancel' },{ id: 'Delay', name: 'Delay' }])\r\n  // form: RowData[] = []\r\n  // columns: TableData[] = [\r\n  //   { title: 'Client', value: ['client','name'] },\r\n  //   { title: 'Customer', value: ['customer','name'] },\r\n  //   {title:'PO Number', value:'po_number'},\r\n  //   {title:'Status', value:'status', bool:true},\r\n  // ]\r\n  // selectAllSelector = selectAllPoheads\r\n  // selectCurrent = selectCurrentPohead\r\n  // constructor(private store: Store<any>) { }\r\n\r\n  // ngOnInit() {\r\n  //   this.store.dispatch(loadPoheads())\r\n  //   this.store.dispatch(loadClients())\r\n  //   this.client = this.store.select(selectAllClients)\r\n  //   this.store.dispatch(loadCustomers())\r\n  //   this.customer = this.store.select(selectAllCustomers)\r\n  //   this.store.dispatch(loadFactorycodes())\r\n  //   this.factorycode = this.store.select(selectAllFactorycodes)\r\n\r\n\r\n\r\n  //   this.form = [\r\n  //   {\r\n  //     row: [\r\n  //       { label: 'Client ', name: 'client', items: this.client, validator: Validators.required,type:'select' },\r\n  //       { label: 'Customer ', name: 'customer',items: this.customer, validator: Validators.required,type:'select' },\r\n  //     ]\r\n  //   },\r\n  //   {\r\n  //     row: [\r\n  //       { label: 'Factory Code', name: 'factory',  items: this.factorycode, validator: Validators.required,type:'select' },\r\n  //       { label: 'PO Number ', name: 'po_number', validator: Validators.required },\r\n  //     ]\r\n  //   },\r\n  //   {\r\n  //     row: [\r\n  //       { label: 'Customer Order No ', name: 'customer_order_no', validator: Validators.required },\r\n  //       // { label: 'Entry Date', name: 'entry_date', validator: Validators.required,type:'date' },\r\n  //     ]\r\n  //   },\r\n  //   {\r\n  //     row: [\r\n  //       { label: 'Customer Req Date ', name: 'customer_req_date', validator: Validators.required,type:'date' },\r\n  //       { label: 'Production Date ', name: 'production_date', validator: Validators.required,type:'date' },\r\n  //     ]\r\n  //   },\r\n  //   {\r\n  //     row: [\r\n  //       { label: 'Delivery Date ', name: 'delivery_date', validator: Validators.required,type:'date' },\r\n  //       { label: 'Last Ship Date ', name: 'last_ship_date', validator: Validators.required,type:'date' },\r\n  //     ]\r\n  //   },\r\n  //   {\r\n  //     row: [\r\n  //       { label: 'Ship Mode ', name: 'ship_mode', items: this.shipmode, validator: Validators.required,type:'select' },\r\n  //       { label: 'Payment Mode ', name: 'payment_mode', items: this.paymentmode, validator: Validators.required,type:'select' },\r\n  //     ]\r\n  //   },\r\n  //   {\r\n  //     row: [\r\n  //       { label: 'Order Type ', name: 'order_type',  items: this.ordertype, validator: Validators.required,type:'select' },\r\n  //       { label: 'Order Status ', name: 'order_status', items: this.orderstatus, validator: Validators.required,type:'select' },\r\n  //     ]\r\n  //   },\r\n  //   {\r\n  //     row: [\r\n  //       { label: 'Cancel Date ', name: 'cancel_date' ,type:'date' },\r\n  //       { label: 'MTFC No ', name: 'mtfc_no'},\r\n  //     ]\r\n  //   },\r\n \r\n  //   {\r\n  //     row: [\r\n      \r\n  //       { label: 'Description', name: 'description'},\r\n  //     ]\r\n  //   },\r\n  //    {\r\n  //     row: [\r\n  //       { label: 'Lock Status', name: 'lock_status', type:'check' }\r\n  //     ]\r\n  //   }, {\r\n  //     row: [\r\n  //       { label: 'Status', name: 'status', type:'check' }\r\n  //     ]\r\n  //   }\r\n  //   , {\r\n  //     row: [\r\n  //       { label: 'ID', name: 'id', type:'hidden' }\r\n  //     ]\r\n  //   }\r\n  // ]\r\n\r\n  // }\r\n\r\n\r\n\r\n}\r\n","import { EffectsModule } from '@ngrx/effects';\r\nimport { SharedModule } from './../../shared/shared.module';\r\nimport { RouterModule } from '@angular/router';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { CustomTablesModule } from '../../shared/custom-tables/custom-tables.module';\r\nimport { DialogsModule } from '../../shared/dialogs/dialogs.module';\r\nimport { CustomFormsModule } from '../../shared/forms/forms.module';\r\nimport { NgWizardModule, NgWizardConfig, THEME } from 'ng-wizard';\r\n \r\nconst ngWizardConfig: NgWizardConfig = {\r\n  theme: THEME.default\r\n};\r\n\r\n//component imports\r\nimport { PoheadsComponent } from './poheads/poheads.component'\r\n\r\n//store imports\r\nimport * as pohead from 'src/app/features/store/productionorder/pohead'\r\nimport * as client from 'src/app/features/store/customer/client'\r\nimport * as customer from 'src/app/features/store/customer/customer'\r\nimport * as factorycode from 'src/app/features/store/settings/factorycode'\r\n\r\n\r\nimport { StoreModule } from '@ngrx/store';\r\n\r\n@NgModule({\r\n  declarations: [PoheadsComponent],\r\n  imports: [\r\n    CommonModule,\r\n    SharedModule,\r\n    CustomTablesModule,\r\n    DialogsModule,\r\n    CustomFormsModule,\r\n    NgWizardModule.forRoot(ngWizardConfig),\r\n    //store for feature\r\n    StoreModule.forFeature(pohead.poheadFeatureKey, pohead.reducer),\r\n    StoreModule.forFeature(client.clientFeatureKey, client.reducer),\r\n    StoreModule.forFeature(customer.customerFeatureKey, customer.reducer),\r\n    StoreModule.forFeature(factorycode.factorycodeFeatureKey, factorycode.reducer),\r\n\r\n\r\n    EffectsModule.forFeature([ pohead.PoheadEffects,client.ClientEffects,customer.CustomerEffects,factorycode.FactorycodeEffects]),\r\n    RouterModule.forChild([\r\n      { path: '', pathMatch: 'full', redirectTo: 'poheads' },\r\n      {path: 'poheads', component: PoheadsComponent},\r\n     \r\n   \r\n\r\n    ])\r\n  ],\r\n  entryComponents: []\r\n})\r\n\r\nexport class ProductionorderModule { }\r\n","export * from './pohead';\r\nexport * from './pohead.effects';\r\nexport * from './pohead.service';\r\nexport * from './pohead.selectors';\r\nexport * from './pohead.reducer';\r\nexport * from './pohead.actions';\r\n","import {createAction, props} from '@ngrx/store';\r\n\r\nimport {Pohead} from './pohead';\r\n\r\nexport const loadPoheads = createAction(\r\n    '[Pohead/API] Load Poheads'\r\n);\r\n\r\nexport const loadPoheadsSuccess = createAction(\r\n    '[Pohead/API] Load Poheads Success',\r\n    props<{ data: Pohead[] }>(),\r\n);\r\n\r\nexport const addPohead = createAction(\r\n    '[Pohead/API] Add Pohead',\r\n    props<{ data: Pohead }>(),\r\n);\r\n\r\nexport const addPoheadSuccess = createAction(\r\n    '[Pohead/API] Add Pohead Success',\r\n    props<{ data: Pohead }>(),\r\n);\r\n\r\n\r\nexport const deletePohead = createAction(\r\n    '[Pohead/API] Delete Pohead',\r\n    props<{ data: Pohead }>(),\r\n);\r\n\r\nexport const deletePoheadSuccess = createAction(\r\n    '[Pohead/API] Delete Pohead Success',\r\n    props<{ id: string}>(),\r\n);\r\n\r\nexport const selectCurrentPoheadSuccess = createAction(\r\n    '[Pohead/API] Select Current Pohead',\r\n    props<{ data: Pohead }>(),\r\n);\r\n\r\n","import {Injectable} from '@angular/core';\r\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\r\nimport {Store} from '@ngrx/store';\r\nimport {PoheadService} from './pohead.service';\r\nimport {\r\n  addPohead,\r\n  addPoheadSuccess,\r\n  deletePohead, deletePoheadSuccess,\r\n  loadPoheads,\r\n  loadPoheadsSuccess,\r\n} from './pohead.actions';\r\nimport {filter, map, mergeMap, withLatestFrom} from 'rxjs/operators';\r\nimport {allPoheadLoaded} from './pohead.selectors';\r\n\r\n\r\n@Injectable()\r\nexport class PoheadEffects {\r\n\r\n    loadPoheads$ = createEffect(() => this.actions$.pipe(\r\n        ofType(loadPoheads),\r\n        withLatestFrom(this.store.select(allPoheadLoaded)),\r\n        filter(([_, allLoaded]) => !allLoaded),\r\n        mergeMap(_ => this.service.findAll().pipe(\r\n            map(data => loadPoheadsSuccess({data})),\r\n        )),\r\n    ));\r\n\r\n    addPohead$ = createEffect(() => this.actions$.pipe(\r\n        ofType(addPohead),\r\n        mergeMap(action => this.service.save(action.data).pipe(\r\n            map(data => addPoheadSuccess({data})),\r\n        )),\r\n    ));\r\n\r\n    deletePohead$ = createEffect(() => this.actions$.pipe(\r\n        ofType(deletePohead),\r\n        mergeMap(({data}) => this.service.delete(data).pipe(\r\n            map(_ => deletePoheadSuccess({id: data.id})),\r\n        )),\r\n    ));\r\n\r\n    constructor(private actions$: Actions, private store: Store<any>, private service: PoheadService) {\r\n    }\r\n\r\n}\r\n","import {Action, createReducer, on} from '@ngrx/store';\r\nimport {EntityState, EntityAdapter, createEntityAdapter} from '@ngrx/entity';\r\nimport {Pohead} from './pohead';\r\nimport * as PoheadActions from './pohead.actions';\r\n\r\nexport const poheadFeatureKey = 'poheads';\r\n\r\nexport interface PoheadState extends EntityState<Pohead> {\r\n    allPoheadsLoaded: boolean;\r\n    currentPohead: Pohead\r\n}\r\n\r\nexport const adapter: EntityAdapter<Pohead> = createEntityAdapter<Pohead>();\r\n\r\nexport const initialState: PoheadState = adapter.getInitialState({\r\n    allPoheadsLoaded: false,\r\n    currentPohead: null\r\n});\r\n\r\nconst poheadReducer = createReducer(\r\n    initialState,\r\n    on(PoheadActions.addPoheadSuccess,\r\n        (state, action) => adapter.upsertOne(action.data, {...state, currentPohead: action.data}),\r\n    ),\r\n    on(PoheadActions.deletePoheadSuccess,\r\n        (state, action) => adapter.removeOne(action.id, state),\r\n    ),\r\n\r\n    on(PoheadActions.loadPoheadsSuccess,\r\n        (state, action) => adapter.addAll(action.data, state),\r\n    ),\r\n    on(PoheadActions.selectCurrentPoheadSuccess,\r\n        (state, action) => ({...state, currentPohead: action.data}),\r\n    ),\r\n);\r\n\r\nexport function reducer(state: PoheadState | undefined, action: Action) {\r\n    return poheadReducer(state, action);\r\n}\r\n\r\nexport const {\r\n    selectIds,\r\n    selectEntities,\r\n    selectAll,\r\n    selectTotal,\r\n} = adapter.getSelectors();\r\n","import {createFeatureSelector, createSelector} from '@ngrx/store';\r\nimport {PoheadState, poheadFeatureKey, selectAll} from './pohead.reducer';\r\n\r\nconst featureState = createFeatureSelector<PoheadState>(poheadFeatureKey);\r\n\r\nexport const selectAllPoheads = createSelector(\r\n    featureState,\r\n    selectAll,\r\n);\r\n\r\nexport const allPoheadLoaded = createSelector(\r\n    featureState,\r\n    state => state.allPoheadsLoaded,\r\n);\r\n\r\nexport const selectCurrentPohead = createSelector(\r\n    featureState,\r\n    state => state.currentPohead\r\n)\r\n\r\n","import {Injectable} from '@angular/core';\r\nimport {APP_CONFIG} from '../../../../app.config';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {Pohead} from './pohead';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class PoheadService {\r\n    private url = `${APP_CONFIG.BASE_URL}/production-order-heads/`;\r\n\r\n    constructor(private http: HttpClient) {\r\n    }\r\n\r\n    findAll(): Observable<Pohead[]> {\r\n        return this.http.get<Pohead[]>(this.url);\r\n    }\r\n\r\n    save(item: Pohead): Observable<Pohead> {\r\n        if (!item.id) {\r\n            return this.http.post<Pohead>(this.url, item);\r\n        } else {\r\n            return this.update(item);\r\n        }\r\n    }\r\n\r\n    private update(item: Pohead): Observable<Pohead> {\r\n        return this.http.put<Pohead>(`${this.url}${item.id}/`, item);\r\n    }\r\n\r\n    delete(item: Pohead) {\r\n        return this.http.delete(`${this.url}${item.id}/`);\r\n    }\r\n}\r\n"],"sourceRoot":""}